export module atom.core:ptr;
import :std;
import :core;
import :tti;
import :requirements;
import :contracts_decl;

export namespace atom
{
    template <typename type>
    class mut_ptr;

    /// --------------------------------------------------------------------------------------------
    ///
    /// --------------------------------------------------------------------------------------------
    template <typename tval_>
    class ptr
    {
        static_assert(tti::is_pure<tval_>, "ptr only supports pure types.");
        static_assert(not tti::is_void<tval_>, "ptr does not support void.");

    private:
        using this_type = ptr<tval_>;

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        using value_type = tval_;

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr ptr()
            : _ptr(nullptr)
        {}

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr ptr(const this_type&) = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr ptr& operator=(const this_type&) = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr ptr(this_type&&) = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr ptr& operator=(this_type&&) = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr ptr(nullptr_type)
            : _ptr(nullptr)
        {}

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr ptr& operator=(nullptr_type)
        {
            _ptr = nullptr;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr ptr(const ptr<type>& ptr)
            requires rconvertible_to<type*, value_type*>
            : _ptr(static_cast<const value_type*>(ptr.unwrap()))
        {}

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr ptr& operator=(ptr<type> ptr)
            requires rconvertible_to<type*, value_type*>
        {
            _ptr = static_cast<const value_type*>(ptr.unwrap());
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr ptr(const value_type* ptr)
            : _ptr(ptr)
        {}

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr ptr& operator=(const value_type* ptr)
        {
            _ptr = ptr;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr ~ptr() = default;

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto set(ptr<value_type> ptr)
        {
            _ptr = ptr.unwrap();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto get() const -> const value_type&
        {
            contracts::debug_expects(not is_null(), "null ptr access.");

            return *_ptr;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto get_safe() const -> const value_type&
        {
            contracts::expects(not is_null(), "null ptr access.");

            return *_ptr;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator->() const -> const value_type*
        {
            contracts::debug_expects(not is_null(), "null ptr access.");

            return _ptr;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto as() const -> ptr<type>
            requires rpure<type> and rconvertible_to<value_type*, type*>
        {
            return static_cast<const type*>(_ptr);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto as_unsafe() const -> ptr<type>
            requires rpure<type>
        {
            return reinterpret_cast<const type*>(_ptr);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto as_dyn() const -> ptr<type>
            requires rpolymorphic<value_type> and rpure<type> and rpolymorphic<type>
        {
            return dynamic_cast<const type*>(_ptr);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto as_mut() const -> mut_ptr<value_type>
        {
            return const_cast<value_type*>(_ptr);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto is_null() const -> bool
        {
            return unwrap() == nullptr;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto is_eq(nullptr_type) const -> bool
        {
            return unwrap() == nullptr;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto is_eq(const this_type& that) const -> bool
        {
            return unwrap() == that.unwrap();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto unwrap() const -> const value_type*
        {
            return _ptr;
        }

    protected:
        const value_type* _ptr;
    };

    template <typename type>
    ptr(const type* p) -> ptr<type>;

    /// --------------------------------------------------------------------------------------------
    ///
    /// --------------------------------------------------------------------------------------------
    template <>
    class ptr<void>
    {
        using this_type = ptr<void>;

    public:
        using value_type = void;

    public:
        /// ----------------------------------------------------------------------------------------
        /// # default constructor
        /// ----------------------------------------------------------------------------------------
        constexpr ptr()
            : _ptr(nullptr)
        {}

        /// ----------------------------------------------------------------------------------------
        /// # copy constructr
        /// ----------------------------------------------------------------------------------------
        constexpr ptr(const this_type&) = default;

        /// ----------------------------------------------------------------------------------------
        /// # copy operator
        /// ----------------------------------------------------------------------------------------
        constexpr ptr& operator=(const this_type&) = default;

        /// ----------------------------------------------------------------------------------------
        /// # move constuctor
        /// ----------------------------------------------------------------------------------------
        constexpr ptr(this_type&&) = default;

        /// ----------------------------------------------------------------------------------------
        /// # move operator
        /// ----------------------------------------------------------------------------------------
        constexpr ptr& operator=(this_type&&) = default;

        /// ----------------------------------------------------------------------------------------
        /// # null constructor
        /// ----------------------------------------------------------------------------------------
        constexpr ptr(nullptr_type)
            : _ptr(nullptr)
        {}

        /// ----------------------------------------------------------------------------------------
        /// # null operator
        /// ----------------------------------------------------------------------------------------
        constexpr ptr& operator=(nullptr_type)
        {
            _ptr = nullptr;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// # constructor
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr ptr(const ptr<type>& ptr)
            : _ptr(static_cast<const void*>(ptr.unwrap()))
        {}

        /// ----------------------------------------------------------------------------------------
        /// # operator
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr ptr& operator=(const ptr<type>& ptr)
        {
            _ptr = static_cast<const void*>(ptr.unwrap());
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// # value constructor
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr ptr(const type* ptr)
            requires rpure<type>
            : _ptr(static_cast<const void*>(ptr))
        {}

        /// ----------------------------------------------------------------------------------------
        /// # value operator
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr ptr& operator=(const type* ptr)
            requires rpure<type>
        {
            _ptr = static_cast<const void*>(ptr);
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// # destructor
        /// ----------------------------------------------------------------------------------------
        constexpr ~ptr() = default;

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto set(ptr<void> ptr)
        {
            _ptr = ptr.unwrap();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto get() const -> const byte&
        {
            contracts::debug_expects(not is_null(), "null ptr access.");

            return *unwrap_as_byte();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto get_safe() const -> const byte&
        {
            contracts::expects(not is_null(), "null ptr access.");

            return *unwrap_as_byte();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto get_as() const -> const type&
            requires rpure<type>
        {
            contracts::debug_expects(not is_null(), "null ptr access.");

            return *unwrap_as<type>();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto get_safe_as() const -> const type&
            requires rpure<type>
        {
            contracts::expects(not is_null(), "null ptr access.");

            return *unwrap_as<type>();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto as() const -> ptr<type>
        {
            return static_cast<const type*>(_ptr);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto as_mut() const -> mut_ptr<void>;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto is_null() const -> bool
        {
            return unwrap() == nullptr;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto is_eq(nullptr_type) const -> bool
        {
            return unwrap() == nullptr;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto is_eq(const ptr<type>& that) const -> bool
        {
            return unwrap() == that.unwrap();
        }

        /// -------------
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto unwrap() const -> const void*
        {
            return _ptr;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto unwrap_as() const -> const type*
        {
            return static_cast<const type*>(_ptr);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto unwrap_as_byte() const -> const byte*
        {
            return static_cast<const byte*>(_ptr);
        }

    protected:
        const void* _ptr;
    };

    ptr(const void*) -> ptr<void>;

    /// --------------------------------------------------------------------------------------------
    ///
    /// --------------------------------------------------------------------------------------------
    template <typename tval_>
    class mut_ptr: public ptr<tval_>
    {
        static_assert(tti::is_pure<tval_>, "mut_ptr only supports pure types.");
        static_assert(not tti::is_void<tval_>, "mut_ptr does not support void.");

    private:
        using this_type = mut_ptr<tval_>;
        using base_type = ptr<tval_>;

    public:
        using value_type = base_type::value_type;

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr() = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr(const mut_ptr&) = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr& operator=(const mut_ptr&) = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr(mut_ptr&&) = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr& operator=(mut_ptr&&) = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr(nullptr_type)
            : base_type(nullptr)
        {}

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr& operator=(nullptr_type)
        {
            _ptr = nullptr;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr mut_ptr(const mut_ptr<type>& ptr)
            requires rconvertible_to<type*, value_type*>
            : base_type(static_cast<value_type*>(ptr.unwrap()))
        {}

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr mut_ptr& operator=(const mut_ptr<type>& ptr)
            requires rconvertible_to<type*, value_type*>
        {
            _ptr = static_cast<value_type*>(ptr.unwrap());
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr(value_type* ptr)
            : base_type(ptr)
        {}

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr& operator=(value_type* ptr)
        {
            _ptr = ptr;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr ~mut_ptr() = default;

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto set(mut_ptr<value_type> ptr)
        {
            _ptr = ptr.unwrap();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto get_mut() const -> value_type&
        {
            contracts::debug_expects(not is_null(), "null ptr access.");

            return *_mut_ptr();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto get_mut_safe() const -> value_type&
        {
            contracts::expects(not is_null(), "null ptr access.");

            return *_mut_ptr();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator->() const -> value_type*
        {
            contracts::debug_expects(not is_null(), "null ptr access.");

            return _mut_ptr();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto as() const -> mut_ptr<type>
            requires rpure<type> and rconvertible_to<value_type*, type>
        {
            return static_cast<type*>(_mut_ptr());
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto as_unsafe() const -> mut_ptr<type>
            requires rpure<type>
        {
            return reinterpret_cast<type*>(_mut_ptr());
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto as_dyn() const -> mut_ptr<type>
            requires rpolymorphic<value_type> and rpure<type> and rpolymorphic<type>
        {
            return dynamic_cast<type*>(_mut_ptr());
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto as_const() const -> ptr<value_type>
        {
            return _mut_ptr();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto unwrap() const -> value_type*
        {
            return _mut_ptr();
        }

        using base_type::is_null;

    private:
        constexpr auto _mut_ptr() const -> value_type*
        {
            return const_cast<value_type*>(_ptr);
        }

    protected:
        using base_type::_ptr;
    };

    template <typename type>
    mut_ptr(type* ptr) -> mut_ptr<type>;

    /// --------------------------------------------------------------------------------------------
    ///
    /// --------------------------------------------------------------------------------------------
    template <>
    class mut_ptr<void>: public ptr<void>
    {
        using this_type = mut_ptr<void>;
        using base_type = ptr<void>;

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr() = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr(const mut_ptr&) = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr& operator=(const mut_ptr&) = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr(mut_ptr&&) = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr& operator=(mut_ptr&&) = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr(nullptr_type)
            : base_type(nullptr)
        {}

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr mut_ptr& operator=(nullptr_type)
        {
            _ptr = nullptr;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr mut_ptr(const mut_ptr<type>& ptr)
            : base_type(static_cast<void*>(ptr.unwrap()))
        {}

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr mut_ptr& operator=(const mut_ptr<type>& ptr)
        {
            _ptr = static_cast<void*>(ptr.unwrap());
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr mut_ptr(type* ptr)
            requires rpure<type>
            : base_type(static_cast<void*>(ptr))
        {}

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr mut_ptr& operator=(type* ptr)
            requires rpure<type>
        {
            _ptr = static_cast<void*>(ptr);
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr ~mut_ptr() = default;

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto set(mut_ptr<void> ptr)
        {
            _ptr = ptr.unwrap();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto get_mut() const -> byte&
        {
            contracts::debug_expects(not is_null(), "null ptr access.");

            return *unwrap_as_byte();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto get_mut_safe() const -> byte&
        {
            contracts::expects(not is_null(), "null ptr access.");

            return *unwrap_as_byte();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto get_mut_as() const -> type&
            requires rpure<type>
        {
            contracts::debug_expects(not is_null(), "null ptr access.");

            return *unwrap_as<type>();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto get_mut_safe_as() const -> type&
            requires rpure<type>
        {
            contracts::expects(not is_null(), "null ptr access.");

            return *unwrap_as<type>();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto as() const -> mut_ptr<type>
        {
            return static_cast<type*>(_mut_ptr());
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto as_const() const -> ptr<void>
        {
            return _mut_ptr();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto unwrap() const -> void*
        {
            return _mut_ptr();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename type>
        constexpr auto unwrap_as() const -> type*
        {
            return static_cast<type*>(_mut_ptr());
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto unwrap_as_byte() const -> byte*
        {
            return static_cast<byte*>(_mut_ptr());
        }

        using base_type::is_null;

    private:
        constexpr auto _mut_ptr() const -> void*
        {
            return const_cast<void*>(_ptr);
        }

    protected:
        using base_type::_ptr;
    };

    mut_ptr(void*) -> mut_ptr<void>;

    /// ----------------------------------------------------------------------------------------
    ///
    /// ----------------------------------------------------------------------------------------
    constexpr auto ptr<void>::as_mut() const -> mut_ptr<void>
    {
        return const_cast<void*>(_ptr);
    }
}
