export module atom.core:ptr;

// import :std;
import :core;
// import :tti;
import :requirements;

// import :contracts_decl;

// export namespace atom
// {
//     template <typename type>
//     class mut_ptr;

//     /// --------------------------------------------------------------------------------------------
//     ///
//     /// --------------------------------------------------------------------------------------------
//     template <typename in_value_type>
//     class ptr
//     {
//         static_assert(tti::is_pure<in_value_type>, "ptr only supports pure types.");
//         static_assert(not tti::is_void<in_value_type>, "ptr does not support void.");

//     private:
//         using this_type = const in_value_type*;

//     public:
//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         using value_type = in_value_type;

//     public:
//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr()
//             : _ptr(nullptr)
//         {}

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr(const this_type&) = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr& operator=(const this_type&) = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr(this_type&&) = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr& operator=(this_type&&) = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr(nullptr_type)
//             : _ptr(nullptr)
//         {}

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr& operator=(nullptr_type)
//         {
//             _ptr = nullptr;
//             return *this;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr ptr(const const type*& ptr)
//             requires rconvertible_to<type*, value_type*>
//             : _ptr(static_cast<const value_type*>(ptr.to_unwrapped()))
//         {}

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr ptr& operator=(const type* ptr)
//             requires rconvertible_to<type*, value_type*>
//         {
//             _ptr = static_cast<const value_type*>(ptr.to_unwrapped());
//             return *this;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr(const value_type* ptr)
//             : _ptr(ptr)
//         {}

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr& operator=(const value_type* ptr)
//         {
//             _ptr = ptr;
//             return *this;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr ~ptr() = default;

//     public:
//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto set(const value_type* ptr)
//         {
//             _ptr = ptr.to_unwrapped();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto get() const -> const value_type&
//         {
//             contracts::debug_expects(not is_null(), "null ptr access.");

//             return *_ptr;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto get_safe() const -> const value_type&
//         {
//             contracts::expects(not is_null(), "null ptr access.");

//             return *_ptr;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto operator->() const -> const value_type*
//         {
//             contracts::debug_expects(not is_null(), "null ptr access.");

//             return _ptr;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto as() const -> const type*
//             requires rpure<type> and rconvertible_to<value_type*, type*>
//         {
//             return static_cast<const type*>(_ptr);
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto as_unsafe() const -> const type*
//             requires rpure<type>
//         {
//             return reinterpret_cast<const type*>(_ptr);
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto as_dyn() const -> const type*
//             requires rpolymorphic<value_type> and rpure<type> and rpolymorphic<type>
//         {
//             return dynamic_cast<const type*>(_ptr);
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto as_mut() const -> value_type*
//         {
//             return const_cast<value_type*>(_ptr);
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto is_null() const -> bool
//         {
//             return to_unwrapped() == nullptr;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto is_eq(nullptr_type) const -> bool
//         {
//             return to_unwrapped() == nullptr;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto is_eq(const this_type& that) const -> bool
//         {
//             return to_unwrapped() == that.to_unwrapped();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto to_unwrapped() const -> const value_type*
//         {
//             return _ptr;
//         }

//     protected:
//         const value_type* _ptr;
//     };

//     template <typename type>
//     ptr(const type* p) -> const type*;

//     /// --------------------------------------------------------------------------------------------
//     ///
//     /// --------------------------------------------------------------------------------------------
//     template <>
//     class const void*
//     {
//         using this_type = const void*;

//     public:
//         using value_type = void;

//     public:
//         /// ----------------------------------------------------------------------------------------
//         /// # default constructor
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr()
//             : _ptr(nullptr)
//         {}

//         /// ----------------------------------------------------------------------------------------
//         /// # copy constructr
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr(const this_type&) = default;

//         /// ----------------------------------------------------------------------------------------
//         /// # copy operator
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr& operator=(const this_type&) = default;

//         /// ----------------------------------------------------------------------------------------
//         /// # move constuctor
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr(this_type&&) = default;

//         /// ----------------------------------------------------------------------------------------
//         /// # move operator
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr& operator=(this_type&&) = default;

//         /// ----------------------------------------------------------------------------------------
//         /// # null constructor
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr(nullptr_type)
//             : _ptr(nullptr)
//         {}

//         /// ----------------------------------------------------------------------------------------
//         /// # null operator
//         /// ----------------------------------------------------------------------------------------
//         constexpr ptr& operator=(nullptr_type)
//         {
//             _ptr = nullptr;
//             return *this;
//         }

//         /// ----------------------------------------------------------------------------------------
//         /// # constructor
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr ptr(const const type*& ptr)
//             : _ptr(static_cast<const void*>(ptr.to_unwrapped()))
//         {}

//         /// ----------------------------------------------------------------------------------------
//         /// # operator
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr ptr& operator=(const const type*& ptr)
//         {
//             _ptr = static_cast<const void*>(ptr.to_unwrapped());
//             return *this;
//         }

//         /// ----------------------------------------------------------------------------------------
//         /// # value constructor
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr ptr(const type* ptr)
//             requires rpure<type>
//             : _ptr(static_cast<const void*>(ptr))
//         {}

//         /// ----------------------------------------------------------------------------------------
//         /// # value operator
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr ptr& operator=(const type* ptr)
//             requires rpure<type>
//         {
//             _ptr = static_cast<const void*>(ptr);
//             return *this;
//         }

//         /// ----------------------------------------------------------------------------------------
//         /// # destructor
//         /// ----------------------------------------------------------------------------------------
//         constexpr ~ptr() = default;

//     public:
//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto set(const void* ptr)
//         {
//             _ptr = ptr.to_unwrapped();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto get() const -> const byte&
//         {
//             contracts::debug_expects(not is_null(), "null ptr access.");

//             return *unwrap_as_byte();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto get_safe() const -> const byte&
//         {
//             contracts::expects(not is_null(), "null ptr access.");

//             return *unwrap_as_byte();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto get_as() const -> const type&
//             requires rpure<type>
//         {
//             contracts::debug_expects(not is_null(), "null ptr access.");

//             return *unwrap_as<type>();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto get_safe_as() const -> const type&
//             requires rpure<type>
//         {
//             contracts::expects(not is_null(), "null ptr access.");

//             return *unwrap_as<type>();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto as() const -> const type*
//         {
//             return static_cast<const type*>(_ptr);
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto as_mut() const -> void*;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto is_null() const -> bool
//         {
//             return to_unwrapped() == nullptr;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto is_eq(nullptr_type) const -> bool
//         {
//             return to_unwrapped() == nullptr;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto is_eq(const const type*& that) const -> bool
//         {
//             return to_unwrapped() == that.to_unwrapped();
//         }

//         /// -------------
//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto to_unwrapped() const -> const void*
//         {
//             return _ptr;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto unwrap_as() const -> const type*
//         {
//             return static_cast<const type*>(_ptr);
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto unwrap_as_byte() const -> const byte*
//         {
//             return static_cast<const byte*>(_ptr);
//         }

//     protected:
//         const void* _ptr;
//     };

//     ptr(const void*) -> const void*;

//     /// --------------------------------------------------------------------------------------------
//     ///
//     /// --------------------------------------------------------------------------------------------
//     template <typename in_value_type>
//     class mut_ptr: public const in_value_type*
//     {
//         static_assert(tti::is_pure<in_value_type>, "mut_ptr only supports pure types.");
//         static_assert(not tti::is_void<in_value_type>, "mut_ptr does not support void.");

//     private:
//         using this_type = in_value_type*;
//         using base_type = const in_value_type*;

//     public:
//         using value_type = base_type::value_type;

//     public:
//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr() = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr(const mut_ptr&) = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr& operator=(const mut_ptr&) = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr(mut_ptr&&) = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr& operator=(mut_ptr&&) = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr(nullptr_type)
//             : base_type(nullptr)
//         {}

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr& operator=(nullptr_type)
//         {
//             _ptr = nullptr;
//             return *this;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr mut_ptr(const type*& ptr)
//             requires rconvertible_to<type*, value_type*>
//             : base_type(static_cast<value_type*>(ptr.to_unwrapped()))
//         {}

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr mut_ptr& operator=(const type*& ptr)
//             requires rconvertible_to<type*, value_type*>
//         {
//             _ptr = static_cast<value_type*>(ptr.to_unwrapped());
//             return *this;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr(value_type* ptr)
//             : base_type(ptr)
//         {}

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr& operator=(value_type* ptr)
//         {
//             _ptr = ptr;
//             return *this;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr ~mut_ptr() = default;

//     public:
//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto set(value_type* ptr)
//         {
//             _ptr = ptr.to_unwrapped();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto get_mut() const -> value_type&
//         {
//             contracts::debug_expects(not is_null(), "null ptr access.");

//             return *_mut_ptr();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto get_mut_safe() const -> value_type&
//         {
//             contracts::expects(not is_null(), "null ptr access.");

//             return *_mut_ptr();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto operator->() const -> value_type*
//         {
//             contracts::debug_expects(not is_null(), "null ptr access.");

//             return _mut_ptr();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto as() const -> type*
//             requires rpure<type> and rconvertible_to<value_type*, type>
//         {
//             return static_cast<type*>(_mut_ptr());
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto as_unsafe() const -> type*
//             requires rpure<type>
//         {
//             return reinterpret_cast<type*>(_mut_ptr());
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto as_dyn() const -> type*
//             requires rpolymorphic<value_type> and rpure<type> and rpolymorphic<type>
//         {
//             return dynamic_cast<type*>(_mut_ptr());
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto as_const() const -> const value_type*
//         {
//             return _mut_ptr();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto to_unwrapped() const -> value_type*
//         {
//             return _mut_ptr();
//         }

//         using base_type::is_null;

//     private:
//         constexpr auto _mut_ptr() const -> value_type*
//         {
//             return const_cast<value_type*>(_ptr);
//         }

//     protected:
//         using base_type::_ptr;
//     };

//     template <typename type>
//     mut_ptr(type* ptr) -> type*;

//     /// --------------------------------------------------------------------------------------------
//     ///
//     /// --------------------------------------------------------------------------------------------
//     template <>
//     class void*: public const void*
//     {
//         using this_type = void*;
//         using base_type = const void*;

//     public:
//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr() = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr(const mut_ptr&) = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr& operator=(const mut_ptr&) = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr(mut_ptr&&) = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr& operator=(mut_ptr&&) = default;

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr(nullptr_type)
//             : base_type(nullptr)
//         {}

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr mut_ptr& operator=(nullptr_type)
//         {
//             _ptr = nullptr;
//             return *this;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr mut_ptr(const type*& ptr)
//             : base_type(static_cast<void*>(ptr.to_unwrapped()))
//         {}

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr mut_ptr& operator=(const type*& ptr)
//         {
//             _ptr = static_cast<void*>(ptr.to_unwrapped());
//             return *this;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr mut_ptr(type* ptr)
//             requires rpure<type>
//             : base_type(static_cast<void*>(ptr))
//         {}

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr mut_ptr& operator=(type* ptr)
//             requires rpure<type>
//         {
//             _ptr = static_cast<void*>(ptr);
//             return *this;
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr ~mut_ptr() = default;

//     public:
//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto set(void* ptr)
//         {
//             _ptr = ptr.to_unwrapped();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto get_mut() const -> byte&
//         {
//             contracts::debug_expects(not is_null(), "null ptr access.");

//             return *unwrap_as_byte();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto get_mut_safe() const -> byte&
//         {
//             contracts::expects(not is_null(), "null ptr access.");

//             return *unwrap_as_byte();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto get_mut_as() const -> type&
//             requires rpure<type>
//         {
//             contracts::debug_expects(not is_null(), "null ptr access.");

//             return *unwrap_as<type>();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto get_mut_safe_as() const -> type&
//             requires rpure<type>
//         {
//             contracts::expects(not is_null(), "null ptr access.");

//             return *unwrap_as<type>();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto as() const -> type*
//         {
//             return static_cast<type*>(_mut_ptr());
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto as_const() const -> const void*
//         {
//             return _mut_ptr();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto to_unwrapped() const -> void*
//         {
//             return _mut_ptr();
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         template <typename type>
//         constexpr auto unwrap_as() const -> type*
//         {
//             return static_cast<type*>(_mut_ptr());
//         }

//         /// ----------------------------------------------------------------------------------------
//         ///
//         /// ----------------------------------------------------------------------------------------
//         constexpr auto unwrap_as_byte() const -> byte*
//         {
//             return static_cast<byte*>(_mut_ptr());
//         }

//         using base_type::is_null;

//     private:
//         constexpr auto _mut_ptr() const -> void*
//         {
//             return const_cast<void*>(_ptr);
//         }

//     protected:
//         using base_type::_ptr;
//     };

//     mut_ptr(void*) -> void*;

//     /// ----------------------------------------------------------------------------------------
//     ///
//     /// ----------------------------------------------------------------------------------------
//     constexpr auto const void*::as_mut() const -> void*
//     {
//         return const_cast<void*>(_ptr);
//     }
// }

namespace atom
{
    template <typename value_type>
    constexpr auto operator+(value_type* ptr, isize steps) -> value_type*
    {
        if constexpr (rsame_as<pure_type<value_type>, void>)
            return (char*)ptr + steps.to_unwrapped();
        else
            return ptr + steps.to_unwrapped();
    }

    template <typename value_type>
    constexpr auto operator+(value_type* ptr, usize steps) -> value_type*
    {
        if constexpr (rsame_as<pure_type<value_type>, void>)
            return (char*)ptr + steps.to_unwrapped();
        else
            return ptr + steps.to_unwrapped();
    }

    template <typename value_type>
    constexpr auto operator-(value_type* ptr, isize steps) -> value_type*
    {
        if constexpr (rsame_as<pure_type<value_type>, void>)
            return (char*)ptr - steps.to_unwrapped();
        else
            return ptr - steps.to_unwrapped();
    }

    template <typename value_type>
    constexpr auto operator-(value_type* ptr, usize steps) -> value_type*
    {
        if constexpr (rsame_as<pure_type<value_type>, void>)
            return (char*)ptr - steps.to_unwrapped();
        else
            return ptr - steps.to_unwrapped();
    }
}
