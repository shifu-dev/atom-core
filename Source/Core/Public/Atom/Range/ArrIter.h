#pragma once
#include "IterReqChecks.h"

namespace Atom
{
    /// --------------------------------------------------------------------------------------------
    /// ArrIter iterates over const raw arr.
    /// --------------------------------------------------------------------------------------------
    template <tname T>
    class ArrIter: public ArrIterTag
    {
    public:
        using TElem = T;

    public:
        /// ----------------------------------------------------------------------------------------
        /// DefaultConstructor.
        /// ----------------------------------------------------------------------------------------
        constexpr ctor ArrIter() noex:
            _it{ nullptr } { }

        /// ----------------------------------------------------------------------------------------
        /// NullConstructor.
        /// ----------------------------------------------------------------------------------------
        constexpr ctor ArrIter(NullPtr) noex:
            _it{ nullptr } { }

        /// ----------------------------------------------------------------------------------------
        /// Constructor.
        /// ----------------------------------------------------------------------------------------
        constexpr ctor ArrIter(const T* it) noex:
            _it{ it } { }

    public:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator *() const noex -> const T&
        {
            return *_it;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator ==(const ArrIter& that) const noex -> bool
        {
            return this->_it == that._it;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator !=(const ArrIter& that) const noex -> bool
        {
            return this->_it != that._it;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator ++(int) noex -> ArrIter&
        {
            _it++;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// @TODO[Cpp2RemoveOper].
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator ++() noex -> ArrIter&
        {
            _it++;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator --(int) noex -> ArrIter&
        {
            _it--;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator +=(usize steps) noex -> ArrIter&
        {
            _it =+ steps;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator -=(usize steps) noex -> ArrIter&
        {
            _it =- steps;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator +(usize steps) const noex -> ArrIter
        {
            return ArrIter(_it + steps);
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator -(usize steps) const noex -> ArrIter
        {
            return ArrIter(_it - steps);
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator -(const ArrIter& that) const noex -> isize
        {
            return this->_it - that._it;
        }

    protected:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        const T* _it;
    };

    ATOM_SATISFIES_ARR_ITER_TEMP(ArrIter);

    /// --------------------------------------------------------------------------------------------
    /// MutArrIter iterates over raw arr.
    /// --------------------------------------------------------------------------------------------
    template <tname T>
    class MutArrIter: public ArrIter<T>
    {
    public:
        using ArrIter<T>::ArrIter;

    public:
        using ArrIter<T>::operator*;

        constexpr fn operator *() noex -> T&
        {
            return *(T*)this->_it;
        }

    public:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator +(usize steps) const noex -> MutArrIter
        {
            return MutArrIter(this->_it + steps);
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator -(usize steps) const noex -> MutArrIter
        {
            return MutArrIter(this->_it - steps);
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator -(const MutArrIter& that) const noex -> isize
        {
            return this->_it - that._it;
        }
    };

    ATOM_SATISFIES_MUT_ARR_ITER_TEMP(ArrIter);
}