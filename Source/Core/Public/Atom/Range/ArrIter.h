#pragma once
#include "IterReqChecks.h"

namespace Atom
{
    /// --------------------------------------------------------------------------------------------
    /// ArrIter iterates over const raw arr.
    /// --------------------------------------------------------------------------------------------
    template <typename T>
    class ArrIter: public ArrIterTag
    {
    public:
        using TElem = T;

    public:
        /// ----------------------------------------------------------------------------------------
        /// DefaultConstructor.
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter()
            : _it{ nullptr }
        {}

        /// ----------------------------------------------------------------------------------------
        /// NullConstructor.
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter(NullPtr)
            : _it{ nullptr }
        {}

        /// ----------------------------------------------------------------------------------------
        /// Constructor.
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter(const T* it)
            : _it{ it }
        {}

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator*() const -> const T&
        {
            return *_it;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator==(const ArrIter& that) const -> bool
        {
            return this->_it == that._it;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator!=(const ArrIter& that) const -> bool
        {
            return this->_it != that._it;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator++(i32) -> ArrIter&
        {
            _it++;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// @TODO[Cpp2RemoveOper].
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator++() -> ArrIter&
        {
            _it++;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator--(i32) -> ArrIter&
        {
            _it--;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator+=(usize steps) -> ArrIter&
        {
            _it = +steps;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator-=(usize steps) -> ArrIter&
        {
            _it = -steps;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator+(usize steps) const -> ArrIter
        {
            return ArrIter(_it + steps);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator-(usize steps) const -> ArrIter
        {
            return ArrIter(_it - steps);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator-(const ArrIter& that) const -> isize
        {
            return this->_it - that._it;
        }

    protected:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        const T* _it;
    };

    ATOM_SATISFIES_ARR_ITER_TEMP(ArrIter);

    /// --------------------------------------------------------------------------------------------
    /// MutArrIter iterates over raw arr.
    /// --------------------------------------------------------------------------------------------
    template <typename T>
    class MutArrIter: public ArrIter<T>
    {
    public:
        using ArrIter<T>::ArrIter;

    public:
        using ArrIter<T>::operator*;

        constexpr auto operator*() -> T&
        {
            return *(T*)this->_it;
        }

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator+(usize steps) const -> MutArrIter
        {
            return MutArrIter(this->_it + steps);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator-(usize steps) const -> MutArrIter
        {
            return MutArrIter(this->_it - steps);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator-(const MutArrIter& that) const -> isize
        {
            return this->_it - that._it;
        }
    };

    ATOM_SATISFIES_MUT_ARR_ITER_TEMP(ArrIter);
}
