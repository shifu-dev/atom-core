#pragma once
#include "IterReqChecks.h"

namespace Atom
{
    /// --------------------------------------------------------------------------------------------
    /// ArrIter iterates over raw arr.
    /// --------------------------------------------------------------------------------------------
    template <typename T>
    requires(not RConst<T>)
    class ArrIter
    {
    public:
        using TElem = T;

    public:
        /// ----------------------------------------------------------------------------------------
        /// # Default Constructor
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter()
            : _it{ nullptr } {}

        /// ----------------------------------------------------------------------------------------
        /// # Value Constructor
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter(const T* it)
            : _it{ it } {}

    public:
        /// ----------------------------------------------------------------------------------------
        /// Access value by ref.
        /// ----------------------------------------------------------------------------------------
        constexpr auto value() const -> const T&
        {
            return *_it;
        }

        /// ----------------------------------------------------------------------------------------
        /// Access value by ptr.
        /// ----------------------------------------------------------------------------------------
        constexpr auto data() const -> const T*
        {
            return this->_it;
        }

        /// ----------------------------------------------------------------------------------------
        /// Check if this iter is same as `that`. Used to compare wth end.
        /// ----------------------------------------------------------------------------------------
        constexpr auto equals(const ArrIter& that) const -> bool
        {
            return this->_it == that._it;
        }

        /// ----------------------------------------------------------------------------------------
        /// Move fwd by `steps`.
        /// ----------------------------------------------------------------------------------------
        constexpr auto next(usize steps = 1) -> ArrIter&
        {
            _it += steps;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// Move bwd by `steps`.
        /// ----------------------------------------------------------------------------------------
        constexpr auto prev(usize steps = 1) -> ArrIter&
        {
            _it -= steps;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// Compares `this` data with `that` data.
        /// ----------------------------------------------------------------------------------------
        constexpr auto compare(const ArrIter& that) const -> isize
        {
            return this->_it - that._it;
        }

    protected:
        const T* _it;
    };

    /// --------------------------------------------------------------------------------------------
    /// MutArrIter iterates over mut raw arr.
    /// --------------------------------------------------------------------------------------------
    template <typename T>
    requires(not RConst<T>)
    class MutArrIter
    {
    public:
        using TElem = T;

    public:
        /// ----------------------------------------------------------------------------------------
        /// # Default Constructor
        /// ----------------------------------------------------------------------------------------
        constexpr MutArrIter()
            : _it{ nullptr } {}

        /// ----------------------------------------------------------------------------------------
        /// # Value Constructor
        /// ----------------------------------------------------------------------------------------
        constexpr MutArrIter(T* it)
            : _it{ it } {}

    public:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        template <typename T1>
        constexpr operator ArrIter<T1>() const
            requires(RConvertibleTo<T*, const T1*>)
        {
            return ArrIter<T1>{ _it };
        }

    public:
        /// ----------------------------------------------------------------------------------------
        /// Access value by ref.
        /// ----------------------------------------------------------------------------------------
        constexpr auto value() const -> const T&
        {
            return *_it;
        }

        /// ----------------------------------------------------------------------------------------
        /// Access value by mut ref.
        /// ----------------------------------------------------------------------------------------
        constexpr auto mutValue() -> T&
        {
            return *_it;
        }

        /// ----------------------------------------------------------------------------------------
        /// Access value by ptr.
        /// ----------------------------------------------------------------------------------------
        constexpr auto data() const -> const T*
        {
            return _it;
        }

        /// ----------------------------------------------------------------------------------------
        /// Access value by mut ptr.
        /// ----------------------------------------------------------------------------------------
        constexpr auto mutData() -> T*
        {
            return _it;
        }

        /// ----------------------------------------------------------------------------------------
        /// Check if this iter is same as `that`. Used to compare wth end.
        /// ----------------------------------------------------------------------------------------
        constexpr auto equals(const MutArrIter& that) const -> bool
        {
            return this->_it == that._it;
        }

        /// ----------------------------------------------------------------------------------------
        /// Move fwd by `steps`.
        /// ----------------------------------------------------------------------------------------
        constexpr auto next(usize steps = 1) -> MutArrIter&
        {
            _it += steps;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// Move bwd by `steps`.
        /// ----------------------------------------------------------------------------------------
        constexpr auto prev(usize steps = 1) -> MutArrIter&
        {
            _it -= steps;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// Compares `this` data with `that` data.
        /// ----------------------------------------------------------------------------------------
        constexpr auto compare(const MutArrIter& that) const -> isize
        {
            return this->_it - that._it;
        }

    protected:
        T* _it;
    };

    ATOM_SATISFIES_ARR_ITER_TEMP(ArrIter);
    ATOM_SATISFIES_MUT_ARR_ITER_TEMP(ArrIter);
}
