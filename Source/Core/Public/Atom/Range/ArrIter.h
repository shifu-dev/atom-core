#pragma once
#include "IterReqChecks.h"

namespace Atom
{
    /// --------------------------------------------------------------------------------------------
    /// ArrIter iterates over const raw arr.
    /// --------------------------------------------------------------------------------------------
    template <typename T>
    class ArrIter: public ArrIterTag
    {
    public:
        using TElem = T;

    public:
        /// ----------------------------------------------------------------------------------------
        /// DefaultConstructor.
        /// ----------------------------------------------------------------------------------------
        constexpr ctor ArrIter():
            _it{ nullptr } { }

        /// ----------------------------------------------------------------------------------------
        /// NullConstructor.
        /// ----------------------------------------------------------------------------------------
        constexpr ctor ArrIter(NullPtr):
            _it{ nullptr } { }

        /// ----------------------------------------------------------------------------------------
        /// Constructor.
        /// ----------------------------------------------------------------------------------------
        constexpr ctor ArrIter(const T* it):
            _it{ it } { }

    public:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator*() const -> const T&
        {
            return *_it;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator==(const ArrIter& that) const -> bool
        {
            return self._it == that._it;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator!=(const ArrIter& that) const -> bool
        {
            return self._it != that._it;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator++(i32) -> ArrIter&
        {
            _it++;
            return self;
        }

        /// ----------------------------------------------------------------------------------------
        /// @TODO[Cpp2RemoveOper].
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator++() -> ArrIter&
        {
            _it++;
            return self;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator--(i32) -> ArrIter&
        {
            _it--;
            return self;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator+=(usize steps) -> ArrIter&
        {
            _it =+ steps;
            return self;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator-=(usize steps) -> ArrIter&
        {
            _it =- steps;
            return self;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator+(usize steps) const -> ArrIter
        {
            return ArrIter(_it + steps);
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator-(usize steps) const -> ArrIter
        {
            return ArrIter(_it - steps);
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator-(const ArrIter& that) const -> isize
        {
            return self._it - that._it;
        }

    protected:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        const T* _it;
    };

    ATOM_SATISFIES_ARR_ITER_TEMP(ArrIter);

    /// --------------------------------------------------------------------------------------------
    /// MutArrIter iterates over raw arr.
    /// --------------------------------------------------------------------------------------------
    template <typename T>
    class MutArrIter: public ArrIter<T>
    {
    public:
        using ArrIter<T>::ArrIter;

    public:
        using ArrIter<T>::operator*;

        constexpr fn operator*() -> T&
        {
            return *(T*)self._it;
        }

    public:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator+(usize steps) const -> MutArrIter
        {
            return MutArrIter(self._it + steps);
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator-(usize steps) const -> MutArrIter
        {
            return MutArrIter(self._it - steps);
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr fn operator-(const MutArrIter& that) const -> isize
        {
            return self._it - that._it;
        }
    };

    ATOM_SATISFIES_MUT_ARR_ITER_TEMP(ArrIter);
}