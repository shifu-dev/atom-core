#pragma once
#include "IterReq.h"

namespace Atom
{
    /// --------------------------------------------------------------------------------------------
    /// ArrIter iterates over const raw arr.
    /// --------------------------------------------------------------------------------------------
    template <typename T>
    class ArrIter: public ArrIterTag
    {
    public:
        using TElem = T;

    public:
        /// ----------------------------------------------------------------------------------------
        /// DefaultConstructor.
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter() noexcept:
            _it{ nullptr } { }

        /// ----------------------------------------------------------------------------------------
        /// NullConstructor.
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter(NullPtr) noexcept:
            _it{ nullptr } { }

        /// ----------------------------------------------------------------------------------------
        /// Constructor.
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter(const T* it) noexcept:
            _it{ it } { }

    public:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr const T& operator *() const noexcept
        {
            return *_it;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr bool operator ==(const ArrIter& that) const noexcept
        {
            return this->_it == that._it;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr bool operator !=(const ArrIter& that) const noexcept
        {
            return this->_it != that._it;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter& operator ++(int) noexcept
        {
            _it++;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// @TODO[Cpp2RemoveOper].
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter& operator ++() noexcept
        {
            _it++;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter& operator --(int) noexcept
        {
            _it--;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter& operator +=(usize steps) noexcept
        {
            _it =+ steps;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter& operator -=(usize steps) noexcept
        {
            _it =- steps;
            return *this;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter operator +(usize steps) const noexcept
        {
            return ArrIter(_it + steps);
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr ArrIter operator -(usize steps) const noexcept
        {
            return ArrIter(_it - steps);
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr isize operator -(const ArrIter& that) const noexcept
        {
            return this->_it - that._it;
        }

    protected:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        const T* _it;
    };

    static_assert(RArrIter<ArrIter<int>, ArrIter<int>, int>,
        "{ArrIter} does not satisfy {RArrIter} requirements.");

    /// --------------------------------------------------------------------------------------------
    /// MutArrIter iterates over raw arr.
    /// --------------------------------------------------------------------------------------------
    template <typename T>
    class MutArrIter: public ArrIter<T>
    {
    public:
        using ArrIter<T>::ArrIter;

    public:
        using ArrIter<T>::operator*;

        constexpr T& operator *() noexcept
        {
            return *(T*)this->_it;
        }

    public:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr MutArrIter operator +(usize steps) const noexcept
        {
            return MutArrIter(this->_it + steps);
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr MutArrIter operator -(usize steps) const noexcept
        {
            return MutArrIter(this->_it - steps);
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr isize operator -(const MutArrIter& that) const noexcept
        {
            return this->_it - that._it;
        }
    };

    static_assert(RMutArrIter<MutArrIter<int>, MutArrIter<int>, int>,
        "{MutArrIter} does not satisfy {RArrIter} requirements.");
}