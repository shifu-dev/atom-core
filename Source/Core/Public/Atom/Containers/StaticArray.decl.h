#pragma once
#include "Atom/Containers/ArrayIterator.h"

namespace Atom
{
    /// --------------------------------------------------------------------------------------------
    /// 
    /// --------------------------------------------------------------------------------------------
    template <typename T, usize Size>
    class StaticArray
    {
    public:
        using TIter = ArrayIterator<T>;
        using TConstIter = ArrayIterator<const T>;
        using TEnd = TIter;

    public:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr bool operator == (const StaticArray& other) const noexcept
        {
            for (usize i = 0; i < Size; i++)
            {
                if (_arr[i] != other._arr[i])
                    return false;
            }

            return true;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr bool operator != (const StaticArray& other) const noexcept
        {
            return !(*this == other);
        }

    public:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr T& operator [](usize index) noexcept
        {
            return _arr[index];
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr const T& operator [](usize index) const noexcept
        {
            return _arr[index];
        }

    public:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr T* Data() noexcept
        {
            return _arr;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr const T* Data() const noexcept
        {
            return _arr;
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr usize Count() const noexcept
        {
            return Size;
        }

    public:
        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr TIter Begin() noexcept
        {
            return TIter{ _arr };
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr TIter End() noexcept
        {
            return TIter{ _arr + Size };
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr TConstIter Begin() const noexcept
        {
            return ConstBegin();
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr TConstIter End() const noexcept
        {
            return ConstEnd();
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr TConstIter ConstBegin() const noexcept
        {
            return TIter{ _arr };
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr TConstIter ConstEnd() const noexcept
        {
            return TIter{ _arr + Size};
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr TIter begin() noexcept
        {
            return TIter{ _arr };
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr TIter end() noexcept
        {
            return TIter{ _arr + Size };
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr TConstIter begin() const noexcept
        {
            return ConstBegin();
        }

        /// ----------------------------------------------------------------------------------------
        /// 
        /// ----------------------------------------------------------------------------------------
        constexpr TConstIter end() const noexcept
        {
            return ConstEnd();
        }

    public:
        /// ----------------------------------------------------------------------------------------
        /// This is public only to allow aggregate initialization. This should not be accessed 
        /// outside the class.
        /// ----------------------------------------------------------------------------------------
        T _arr[Size];
    };
}