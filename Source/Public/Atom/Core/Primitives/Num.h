#pragma once
#include "Byte.h"

#include <numeric>
#include <cmath>

/// ------------------------------------------------------------------------------------------------
/// # To Do
///
/// - Needs refactoring.
/// ------------------------------------------------------------------------------------------------
namespace Atom
{
    class _NumId{};

    template <typename TSelf_, typename TVal_, typename TLimit>
    class _NumImpl
    {
    public:
        using TSelf = TSelf_;
        using TVal = TVal_;

    public:
        static consteval auto Min() -> TVal
        {
            return TVal(std::numeric_limits<TLimit>::min());
        }

        static consteval auto Max() -> TVal
        {
            return TVal(std::numeric_limits<TLimit>::max());
        }

        static consteval auto CountDigits(TVal val) -> size_t
        {
            size_t count = 0;
            while (val > 0)
            {
                val = val / 10;
                count++;
            }

            return count;
        }

        static consteval auto MinDigitsCount() -> size_t
        {
            return CountDigits(Min());
        }

        static consteval auto MaxDigitsCount() -> size_t
        {
            return CountDigits(Max());
        }

        static constexpr auto Abs(TVal val) -> TVal
        {
            if constexpr (std::is_unsigned_v<TVal>)
                return val;

            return std::abs(val);
        }
    };

    template <typename TImpl>
    class Num: public _NumId
    {
        using Self = Num<TImpl>;

    public:
        using TSelf = typename TImpl::TSelf;
        using TVal = typename TImpl::TVal;
        using TStr = typename TImpl::TStr;

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        static consteval auto Min() -> TSelf
        {
            return _Make(TImpl::Min());
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        static consteval auto Max() -> TSelf
        {
            return _Make(TImpl::Max());
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        static consteval auto Bits() -> TSelf
        {
            return _Make(sizeof(TVal) * sizeof(byte));
        }

    public:
        /// ----------------------------------------------------------------------------------------
        /// # To Do: No default constructor should be provided. Value should be initialized explicitly.
        /// ----------------------------------------------------------------------------------------
        constexpr Num() = default;

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        // constexpr Num(const Self& other):
        //     _val{ other._val } { }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        // constexpr auto operator=(const Self& other) -> TSelf&
        // {
        //     _val = other._val;
        //     return _self();
        // }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr Num(TVal num):
            _val{ num }
        {}

        constexpr Num(_NumId, TVal num):
            _val{ num }
        {}

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator=(N num) -> TSelf&
        {
            return assign(num);
        }

    public:
        template <typename N>
        constexpr auto assign(N num) -> TSelf&
        {
            _val = num;

            return _self();
        }

        template <typename N>
        constexpr auto checkedAssign(N num) -> TSelf&
        {
            _val = num;

            return _self();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////
        ////
        //// Arithmetic Operations
        ////
        ////////////////////////////////////////////////////////////////////////////////////////////

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto add(N num) const -> TSelf
        {
            return _clone().addAssign(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto checkedAdd(N num) const -> TSelf
        {
            return _clone().addAssign(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator+(N num) const -> TSelf
        {
            return add(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto addAssign(N u) -> TSelf&
        {
            _val += u;
            return _self();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto checkedAddAssign(N u) -> TSelf&
        {
            _val += u;
            return _self();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator+=(N u) -> TSelf&
        {
            return addAssign(u);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator++(int num) -> TSelf&
        {
            return addAssign(1);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto sub(N num) const -> TSelf
        {
            return _clone().subAssign(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto checkedSub(N num) const -> TSelf
        {
            return _clone().subAssign(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator-(N num) const -> TSelf
        {
            return sub(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto subAssign(N u) -> TSelf&
        {
            _val -= u;
            return _self();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto checkedSubAssign(N u) -> TSelf&
        {
            _val -= u;
            return _self();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator-=(N u) -> TSelf&
        {
            return subAssign(u);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto operator--(int num) -> TSelf&
        {
            return subAssign(1);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto mul(N num) const -> TSelf
        {
            return _clone().mulAssign(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto checkedMul(N num) const -> TSelf
        {
            return _clone().mulAssign(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator*(N num) const -> TSelf
        {
            return mul(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto mulAssign(N u) -> TSelf&
        {
            _val *= u;
            return _self();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto checkedMulAssign(N u) -> TSelf&
        {
            _val *= u;
            return _self();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator*=(N u) -> TSelf&
        {
            return mulAssign(u);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto div(N num) const -> TSelf
        {
            return _clone().divAssign(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto checkedDiv(N num) const -> TSelf
        {
            return _clone().divAssign(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator/(N num) const -> TSelf
        {
            return div(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto divAssign(N u) -> TSelf&
        {
            _val /= u;
            return _self();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto checkedDivAssign(N u) -> TSelf&
        {
            _val /= u;
            return _self();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator/=(N u) -> TSelf&
        {
            return divAssign(u);
        }

        ////////////////////////////////////////////////////////////////////////////////////////////
        ////
        //// Bit Operations
        ////
        ////////////////////////////////////////////////////////////////////////////////////////////

    public:
        constexpr auto leftShift() {}

        constexpr auto rightShift() {}

        constexpr auto leftRotate() {}

        constexpr auto rightRotate() {}

        ////////////////////////////////////////////////////////////////////////////////////////////
        ////
        //// Compairision
        ////
        ////////////////////////////////////////////////////////////////////////////////////////////

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto eq(N num) const -> bool
        {
            return _val == num;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto neq(N num) const -> bool
        {
            return _val != num;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto eqZeroApprox() const -> bool
        {
            return _val == 0;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator==(N num) const -> bool
        {
            return eq(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator!=(N num) const -> bool
        {
            return neq(num);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto cmp(N num) const -> int8_t
            requires(std::derived_from<N, _NumId>)
        {
            if (_val < num._val)
                return -1;
            if (_val > num._val)
                return 1;

            return 0;
        }

        constexpr auto cmp(int num) const -> int8_t
        {
            if (_val < num)
                return -1;
            if (_val > num)
                return 1;

            return 0;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator<(N num) const -> bool
        {
            return cmp(num) == -1;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator<=(N num) const -> bool
        {
            return cmp(num) == -1 || cmp(num) == 0;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator>(N num) const -> bool
        {
            return cmp(num) == 1;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto operator>=(N num) const -> bool
        {
            return cmp(num) == 1 || cmp(num) == 0;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////
        ////
        //// Utils
        ////
        ////////////////////////////////////////////////////////////////////////////////////////////

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto countDigits() const -> TSelf
        {
            return _make(TImpl::CountDigits(_val));
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto abs() const -> TSelf
        {
            return _Make(TImpl::Abs(_val));
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto pow() const -> TSelf
        {
            return _Make(TImpl::Pow(_val));
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto sqrt() const -> TSelf
        {
            return _Make(TImpl::Sqrt(_val));
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto root() const -> TSelf
        {
            return _Make(TImpl::Root(_val));
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto log() const -> TSelf
        {
            return _Make(TImpl::Log(_val));
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto log10() const -> TSelf
        {
            return _Make(TImpl::Log10(_val));
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto min(auto v) const -> TSelf
        {
            if (*this > v) return _Make(v);
            return _clone();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto max(auto v) const -> TSelf
        {
            if (*this < v) return _Make(v);
            return _clone();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto clamp(auto l, auto r) const -> TSelf
        {
            if (*this < l) return _Make(l);
            if (*this > r) return _Make(r);
            return _clone();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto clone() const -> TSelf
        {
            return _clone();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////
        ////
        //// Conversion
        ////
        ////////////////////////////////////////////////////////////////////////////////////////////

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        static consteval auto IsConversionSafe() -> bool
            requires(std::derived_from<N, _NumId>)
        {
            if (Min()._val < N::Min()._val)
                return false;
            if (Max()._val > N::Max()._val)
                return false;

            return true;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr auto to() const -> N
        {
            return N{ typename N::TSelf(_val) };
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        constexpr operator N() const
            requires(IsConversionSafe<N>())
        {
            return to<N>();
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        // template <typename N>
        // explicit constexpr operator N() const
        //     requires(not IsConversionSafe<N>())
        // {
        //     return to<N>();
        // }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr operator TVal() const
        {
            return _val;
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename N>
        static consteval auto checkOverflowOnConversion() -> bool
        {
            return false;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////
        ////
        //// Str Conversion
        ////
        ////////////////////////////////////////////////////////////////////////////////////////////

    public:
        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        constexpr auto toStr() const -> TStr
        {
            return TImpl::ToStr(_val);
        }

        /// ----------------------------------------------------------------------------------------
        ///
        /// ----------------------------------------------------------------------------------------
        template <typename TOut>
        constexpr auto toStrOut(TOut&& out) const -> TOut&
        {
            return TImpl::ToStrOut(_val, fwd(out));
        }

    public:
        constexpr auto val() const -> TVal
        {
            return _val;
        }

    protected:
        constexpr auto _self() const -> const TSelf&
        {
            return static_cast<const TSelf&>(*this);
        }

        constexpr auto _self() -> TSelf&
        {
            return static_cast<TSelf&>(*this);
        }

        constexpr auto _clone() const -> TSelf
        {
            return _Make(_val);
        }

        static constexpr auto _Make(TVal val) -> TSelf
        {
            return TSelf{ val };
        }

    public:
        TVal _val;
    };
};