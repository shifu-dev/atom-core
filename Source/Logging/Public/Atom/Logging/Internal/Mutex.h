#pragma once
#include <mutex>
#include <concepts>

namespace Atom
{
    /// --------------------------------------------------------------------------------------------
    /// SimpleMutex implementation.
    /// 
    /// @TODO Implement this class without {std::mutex}.
    /// --------------------------------------------------------------------------------------------
    class SimpleMutex
    {
    public:
        /// ----------------------------------------------------------------------------------------
        /// DefaultConstructor.
        /// 
        /// @POST Mutex is not locked.
        /// ----------------------------------------------------------------------------------------
        constexpr SimpleMutex() noexcept { }

        /// ----------------------------------------------------------------------------------------
        /// CopyConstructor is deleted.
        /// ----------------------------------------------------------------------------------------
        SimpleMutex(const SimpleMutex& other) = delete;

        /// ----------------------------------------------------------------------------------------
        /// MoveConstructor is default.
        /// ----------------------------------------------------------------------------------------
        SimpleMutex(SimpleMutex&& other) = default;

        /// ----------------------------------------------------------------------------------------
        /// CopyOperator is deleted.
        /// ----------------------------------------------------------------------------------------
        SimpleMutex& operator = (const SimpleMutex& other) = delete;

        /// ----------------------------------------------------------------------------------------
        /// MoveOperator is default.
        /// ----------------------------------------------------------------------------------------
        SimpleMutex& operator = (SimpleMutex&& other) = default;

        /// ----------------------------------------------------------------------------------------
        /// Destructor.
        /// 
        /// @NOTE If mutex is locked by some thread and mutex is destroyed, behaviour is undefined.
        /// ----------------------------------------------------------------------------------------
        ~SimpleMutex() { }

    public:
        /// ----------------------------------------------------------------------------------------
        /// Locks the mutex. If the mutex is already locked by some thread then blocks the calling
        /// thread until lock is acquired.
        /// 
        /// @SEE TryLock().
        /// ----------------------------------------------------------------------------------------
        void Lock()
        {
            _impl.lock();
        }

        /// ----------------------------------------------------------------------------------------
        /// Tries to lock the mutex. If the mutex is already locked by some thread then returns but 
        /// doesn't blocks the thread.
        /// 
        /// @RETURNS {true} if lock acquired, else {false}.
        /// ----------------------------------------------------------------------------------------
        bool TryLock()
        {
            return _impl.try_lock();
        }

        /// ----------------------------------------------------------------------------------------
        /// Unlocks the mutex.
        /// ----------------------------------------------------------------------------------------
        void Unlock()
        {
            _impl.unlock();
        }

    private:
        /// ----------------------------------------------------------------------------------------
        /// Mutex implementation.
        /// ----------------------------------------------------------------------------------------
        std::mutex _impl;
    };

    /// --------------------------------------------------------------------------------------------
    /// NullMutex is a stateless object that doesn't has any locking mechanism.
    /// It's used where a Mutex implementation is needed but thread-safety is not needed.
    /// --------------------------------------------------------------------------------------------
    class NullMutex
    {
    public:
        /// ----------------------------------------------------------------------------------------
        /// DefaultConstructor. Does nothing.
        /// ----------------------------------------------------------------------------------------
        constexpr NullMutex() noexcept { }

        /// ----------------------------------------------------------------------------------------
        /// CopyConstructor is deleted.
        /// ----------------------------------------------------------------------------------------
        constexpr NullMutex(const NullMutex& other) = delete;

        /// ----------------------------------------------------------------------------------------
        /// MoveConstructor is default.
        /// ----------------------------------------------------------------------------------------
        constexpr NullMutex(NullMutex&& other) = default;

        /// ----------------------------------------------------------------------------------------
        /// CopyOperator is deleted.
        /// ----------------------------------------------------------------------------------------
        constexpr NullMutex& operator = (const NullMutex& other) = delete;

        /// ----------------------------------------------------------------------------------------
        /// MoveOperator is default.
        /// ----------------------------------------------------------------------------------------
        constexpr NullMutex& operator = (NullMutex&& other) = default;

        /// ----------------------------------------------------------------------------------------
        /// Destructor. Does nothing.
        /// ----------------------------------------------------------------------------------------
        ~NullMutex() { }

    public:
        /// ----------------------------------------------------------------------------------------
        /// Does nothing.
        /// ----------------------------------------------------------------------------------------
        constexpr void Lock() { }

        /// ----------------------------------------------------------------------------------------
        /// Always returns true.
        /// ----------------------------------------------------------------------------------------
        constexpr bool TryLock() { return true; }

        /// ----------------------------------------------------------------------------------------
        /// Does nothing.
        /// ----------------------------------------------------------------------------------------
        constexpr void Unlock() { }
    };
    
    template <typename MutexType>
    concept MutexRequirements = requires(MutexType mutex)
    {
        { mutex.Lock() } -> std::same_as<void>;
        { mutex.TryLock() } -> std::same_as<bool>;
        { mutex.Unlock() } -> std::same_as<void>;
    };

    template <typename MutexType>
    concept Mutex = MutexRequirements<MutexType>;

    /// --------------------------------------------------------------------------------------------
    /// Locks the mutex on construction and unlocks at destruction. This is done to guarantee
    /// exception safety.
    /// --------------------------------------------------------------------------------------------
    template <typename MutexType>
    requires MutexRequirements<MutexType>
    class MutexGuard
    {
    public:
        /// ----------------------------------------------------------------------------------------
        /// Constructor. Locks the mutex.
        /// 
        /// @PARAM[IN] mutex Mutex to lock.
        /// 
        /// @THROWS UnkownException Exception thrown by {mutex.Lock()}.
        /// ----------------------------------------------------------------------------------------
        MutexGuard(MutexType& mutex):
            _mutex(mutex)
        {
            _mutex.Lock();
        }

        /// ----------------------------------------------------------------------------------------
        /// Destructor. Unlocks the mutex.
        /// 
        /// @THROWS UnkownException Exception thrown by {mutex.Lock()}.
        /// ----------------------------------------------------------------------------------------
        ~MutexGuard()
        {
            _mutex.Unlock();
        }

    private:
        /// ----------------------------------------------------------------------------------------
        /// Mutex object.
        /// ----------------------------------------------------------------------------------------
        MutexType& _mutex;
    };

    /// --------------------------------------------------------------------------------------------
    /// Specialization for NullMutex to avoid any performance overhead.
    /// --------------------------------------------------------------------------------------------
    template <>
    class MutexGuard <NullMutex>
    {
    public:
        /// ----------------------------------------------------------------------------------------
        /// Constructor. Does nothing. It's implemented to meet the MutexRequirements.
        /// 
        /// @PARAM[IN] mutex Mutex reference. (UNUSED).
        /// ----------------------------------------------------------------------------------------
        constexpr MutexGuard(NullMutex& mutex) noexcept { }

        /// ----------------------------------------------------------------------------------------
        /// Destructor. Does nothing.
        /// ----------------------------------------------------------------------------------------
        ~MutexGuard() { }
    };
}